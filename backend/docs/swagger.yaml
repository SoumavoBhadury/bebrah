basePath: /api/v1
definitions:
  model.EditMyProfileReq:
    properties:
      user:
        $ref: '#/definitions/model.User'
    type: object
  model.GetProfileResp:
    properties:
      user:
        $ref: '#/definitions/model.User'
    type: object
  model.GetWorkResp:
    properties:
      work:
        $ref: '#/definitions/model.Work'
    type: object
  model.ListWorksReq:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      user_id:
        type: integer
    type: object
  model.ListWorksResp:
    properties:
      count:
        type: integer
      works:
        items:
          $ref: '#/definitions/model.Work'
        type: array
    type: object
  model.LoginReq:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  model.LoginResp:
    properties:
      token:
        type: string
      tokenExpiredAt:
        type: string
    type: object
  model.RegisterReq:
    properties:
      confirmPassword:
        type: string
      email:
        type: string
      password:
        type: string
    type: object
  model.User:
    properties:
      avatar:
        type: string
      banner:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      info:
        type: string
      password:
        type: string
      token:
        type: string
      user_name:
        type: string
    type: object
  model.Work:
    properties:
      created_at:
        type: string
      data:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      liked:
        type: integer
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: integer
      viewed:
        type: integer
      work_desc:
        type: string
      work_name:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact: {}
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /auth/login:
    post:
      description: login
      parameters:
      - description: login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.LoginReq'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginResp'
      tags:
      - auth
  /auth/logout:
    post:
      description: logout
      responses:
        "200":
          description: OK
          schema:
            type: string
      tags:
      - auth
  /auth/register:
    post:
      description: register
      parameters:
      - description: register request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RegisterReq'
      responses:
        "200":
          description: OK
          schema:
            type: string
      tags:
      - auth
  /likes/:user_id:
    post:
      description: list works by user like
      parameters:
      - description: user id
        in: path
        name: user_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
      tags:
      - like
  /likes/:work_id:
    delete:
      description: unlike a work
      parameters:
      - description: work id
        in: path
        name: work_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
      tags:
      - like
    post:
      description: like a work
      parameters:
      - description: work id
        in: path
        name: work_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
      tags:
      - like
  /ping:
    get:
      description: do ping
      responses:
        "200":
          description: OK
          schema:
            type: string
      tags:
      - example
  /profiles/:user_id:
    get:
      description: get profile
      parameters:
      - description: user id
        in: path
        name: user_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetProfileResp'
      tags:
      - profile
  /profiles/me:
    get:
      description: get my profile
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetProfileResp'
      tags:
      - profile
    post:
      description: edit my profile, note avatar and banner should be a base64 string
      parameters:
      - description: Edit profile request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.EditMyProfileReq'
      responses:
        "200":
          description: OK
          schema:
            type: string
      tags:
      - profile
  /works:
    get:
      description: list all works (by user id or not)
      parameters:
      - description: list works request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.ListWorksReq'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ListWorksResp'
      tags:
      - works
    post:
      description: upload a work
      parameters:
      - description: work file
        in: formData
        name: file
        required: true
        type: file
      - description: work name
        in: formData
        name: name
        required: true
        type: string
      - description: work description
        in: formData
        name: description
        type: string
      responses:
        "200":
          description: OK
          schema:
            type: string
      tags:
      - auth
  /works/:id:
    get:
      description: get a work by work_id
      parameters:
      - description: work id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetWorkResp'
      tags:
      - works
swagger: "2.0"
